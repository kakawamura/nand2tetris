// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   Mux16(sel=zx, b=false, a=true, out=NOT16zx);
   And16(a=x, b=NOT16zx, out=x1);

   Not16(in=x1, out=NOTx1);
   Mux16(sel=nx, b=NOTx1, a=x1, out=x2);

   Mux16(sel=zy, b=false, a=true, out=NOT16zy);
   And16(a=y, b=NOT16zy, out=y1);

   Not16(in=y1, out=NOTy1);
   Mux16(sel=ny, b=NOTy1, a=y1, out=y2);

   And16(a=x2, b=y2, out=x2ANDy2);
   Add16(a=x2, b=y2, out=x2ADDy2);
   Mux16(sel=f, b=x2ADDy2, a=x2ANDy2, out=out1);
   Not16(in=out1, out=NOTout1);
   Mux16(sel=no, b=NOTout1, a=out1, out[0..7]=out2Low, out[8..14]=out2High, out[15]=out2HighHigh);

   Or8Way(in=out2Low, out=orOut1);
   Or8Way(in[0..6]=out2High, in[7]=out2HighHigh, out=orOut2);

   Or(a=orOut1,b=orOut2, out=orOut);
   Not(in=orOut, out=zr);  

   And(a=out2HighHigh, b=true, out=ng);
   And16(a[0..7]=out2Low, a[8..14]=out2High, a[15]=out2HighHigh, b=true, out=out);
}
